#!/command/with-contenv bash
#shellcheck shell=bash disable=SC1090,SC1091,SC2015,SC2154

# Cleanup:
# clean up old files
#---------------------------------------------------------------------------------------------
# Copyright (C) 2022-2025, Ramon F. Kolb (kx1t)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------

source /scripts/common

renice -n 20 -p $$ >/dev/null 2>/dev/null

CLEANUP_EVERY="${CLEANUP_EVER:-1800}"			# 30 minutes in seconds
PHOTOS_RETENTION="${PHOTOS_RETENTION:-20160}"		# 2 weeks in minutes
SCREENSHOT_RETENTION="${SCREENSHOT_RETENTION:-60}"	# 1 hour in minutes
MMSI_RETENTION="${MAX_MSG_AGE:-604800}"			# 1 weeks in seconds
COUNTRY_BKUP_RETENTION="${VESSELDB_BKUP_RETENTION:-20160}"	# 2 weeks in minutes
DISCTMPL_BKUP_RETENTION="${DISCTMPL_BKUP_RETENTION:-20160}"	# 2 weeks in minutes
SHIPSTATUS_BKUP_RETENTION="${SHIPSTATUS_BKUP_RETENTION:-20160}"	# 2 weeks in minutes
SHIPTYPE_BKUP_RETENTION="${SHIPTYPE_BKUP_RETENTION:-20160}"	# 2 weeks in minutes
VESSELDB_BKUP_RETENTION="${VESSELDB_BKUP_RETENTION:-20160}"	# 2 weeks in minutes
MASTODON_CLEANUP_EVERY="${MASTODON_CLEANUP_EVERY:-43200}"	# 12 hours in seconds
DBLOCK_MAXWAIT="${DBLOCK_MAXWAIT:-600}"				# don't wait more than 600 secs for the dblock to be removed

VESSELDBFILE="${VESSELDBFILE:-/data/vessel.db}"
VESSELDBLOCK="${VESSELDBLOCK:-/run/vesseldb.lock}"

[[ ! -f /run/.last_mastodon_cleanup ]] && date +%s > /run/.last_mastodon_cleanup || true

"${s6wrap[@]}" echo "[INFO] Starting Cleanup"
if [[ -f  $VESSELDBLOCK ]]; then
	"${s6wrap[@]}" echo "[INFO] Waiting for vessel.db to become unlocked..."
	is_locked=true
else
	is_locked=false
fi

lockstarttime="$(date +%s)"
while [[ -f  $VESSELDBLOCK ]]
do
	sleep "0.$((RANDOM % 100))"
	if (( $(date +%s) > lockstarttime + DBLOCK_MAXWAIT )); then
		"${s6wrap[@]}" echo "[WARNING] vessel.db has been locked for more than $DBLOCK_MAXWAIT secs. Force-unlocking stale lock process!"
		break
	fi
done

if [[ "$is_locked" == true ]]; then
	"${s6wrap[@]}" echo "[INFO] Vessel.db is now unlocked - continuing cleanup"
fi

# Now lock the process for myself:
touch "$VESSELDBLOCK"

"${s6wrap[@]}" echo -n "[INFO] Removing obsolete screenshots... "
if ! chk_disabled "${SCREENSHOT_RETENTION}"; then
	find /data/imagecache/screenshots -maxdepth 1 -mmin +"${SCREENSHOT_RETENTION}"     -type f -iname "*.jpg" -delete >/dev/null 2>&1
fi
if ! chk_disabled "${PHOTOS_RETENTION}"; then
	echo -n "images... "
	find /data/imagecache           -maxdepth 1 -mmin +"${PHOTOS_RETENTION}"          -type f -iname "*.jpg" -delete >/dev/null 2>&1
fi
echo -n "old backups... "
find /data                        -maxdepth 1 -mmin +"${COUNTRY_BKUP_RETENTION}"    -type f -iname "country.db.*" -delete >/dev/null 2>&1
find /data                        -maxdepth 1 -mmin +"${DISCTMPL_BKUP_RETENTION}"   -type f -iname "discord.template.*" -delete >/dev/null 2>&1
find /data                        -maxdepth 1 -mmin +"${SHIPSTATUS_BKUP_RETENTION}" -type f -iname "shipstatus.db.*" -delete >/dev/null 2>&1
find /data                        -maxdepth 1 -mmin +"${SHIPTYPE_BKUP_RETENTION}"   -type f -iname "shiptype.db.*" -delete >/dev/null 2>&1
find /data                        -maxdepth 1 -mmin +"${VESSELDB_BKUP_RETENTION}"   -type f -iname "vessel.db.*" -delete >/dev/null 2>&1

# iterate through the vessels and clean up the old ones:
echo -n "vessels... "
# get VESSEL data:
source "${VESSELDBFILE}"
#	echo -n "obsolete vessels: "
	removed=()
for mmsi in "${VESSEL_INDEX[@]}"
do
	if [[ -z "${VESSELS[${mmsi}:last_updated]}" ]] || (( $(date +%s) - ${VESSELS[${mmsi}:last_updated]} > MMSI_RETENTION ))
	then
		removed+=("${mmsi}")
		for key in "${KEY_INDEX[@]}"
		do
			unset "VESSELS[$mmsi:$key]"
		done
		for i in "${!VESSEL_INDEX[@]}"
		do
			if [[ "${VESSEL_INDEX[$i]}" == "${mmsi}" ]]
			then
				unset "VESSEL_INDEX[$i]"
				break
			fi
		done
	fi
done

if (( ${#removed[@]} > 0 )); then
	echo "removed ${removed[*]}"
else
	echo ""
fi

# write data back to file:
source "/usr/share/vesselalert/save_databases"

# we can now safely unlock the VesselDB because we're done changing it:
rm -f "$VESSELDBLOCK"

# clean up Mastodon toots:

if [[ -n "$MASTODON_ACCESS_TOKEN" ]] && (( $(date +%s) -  $(</run/.last_mastodon_cleanup) > MASTODON_CLEANUP_EVERY )); then 
	/usr/share/vesselalert/masto_expire delete || true
fi

"${s6wrap[@]}" echo -n "[INFO] Cleanup finished. Next cleanup run at $(date -d @$(( $(date +%s) + CLEANUP_EVERY )) )"
[[ -n "$MASTODON_ACCESS_TOKEN" ]] && echo ". Next Mastodon cleanup run at $(date -d @"$(( $(</run/.last_mastodon_cleanup) + MASTODON_CLEANUP_EVERY ))")" || echo ""

sleep "${CLEANUP_EVERY}"
