#!/command/with-contenv bash
#shellcheck shell=bash
#shellcheck disable=SC2004,SC2015,SC1090,SC2164,SC2001,SC1091,SC2016,SC2154

# Notifier Framework
# Determine if a notification needs to be sent
#---------------------------------------------------------------------------------------------
# Copyright (C) 2022-2025, Ramon F. Kolb (kx1t)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------

source /scripts/common

"${s6wrap[@]}" echo "[INFO] Notification Framework run"

renice -n 10 -p $$ >/dev/null 2>&1

CHECK_INTERVAL="${CHECK_INTERVAL:-30}"
VESSELDBFILE="${VESSELDBFILE:-/data/vessel.db}"
VESSELDBLOCK="${VESSELDBLOCK:-/run/vesseldb.lock}"

# create some defaults and aliases, maintaining backwards compatibility
NOTIFY_MIN_DIST="${NOTIFY_MIN_DIST:-${MASTODON_MIN_DIST}}"
if [[ -z "$NOTIFY_MIN_DIST" ]] || [[ "$NOTIFY_MIN_DIST" == "0" ]]; then unset MASTODON_MIN_DIST NOTIFY_MIN_DIST; fi
NOTIFY_SKIP_FILTER="${NOTIFY_SKIP_FILTER:-${MASTODON_SKIP_FILTER}}"
MIN_MSG_COUNT="${MIN_MSG_COUNT:-10}"

if chk_enabled "$DEBUG"; then
    "${s6wrap[@]}" echo "[DEBUG] NOTIFY_MIN_DIST=$NOTIFY_MIN_DIST"
    "${s6wrap[@]}" echo "[DEBUG] NOTIFY_SKIP_FILTER=$NOTIFY_SKIP_FILTER"
    "${s6wrap[@]}" echo "[DEBUG] MIN_MSG_COUNT=$MIN_MSG_COUNT"
fi

NOTIFY_EVERY="${NOTIFY_EVERY:-${MASTODON_NOTIFY_EVERY}}"

notification_count=0

# chk_enabled "${DEBUG}" && MASTODON_POST_VISIBILITY="private"
IMAGECACHE="${VESSELDBFILE%/*}/imagecache"
[[ -z "${MIN_MSG_COUNT}" ]] && MIN_MSG_COUNT=10 || true

mkdir -p "${IMAGECACHE}/screenshots"

# add some random time to the check interval (0-5 secs)
CHECK_INTERVAL="$(nice -n 20 bc -l <<< "scale=0; x=$RANDOM % 50; scale=1; $CHECK_INTERVAL + x/10")"

RUNS_BEFORE_RESTART="$(nice -n 20 bc -l <<< "scale=0;3 * 60 * 60 / ${CHECK_INTERVAL}")"

# Wait a cycle -- this gives AIS-Collect the chance to do at least an initial run:
sleep "$CHECK_INTERVAL"

# ---------------------------------------------------------------------------------------

for (( loops=0; loops < RUNS_BEFORE_RESTART; loops++ ))
do
    # lock the databases:
    source "/usr/share/vesselalert/vesseldb_lock"

    # load the databases:
    source "/usr/share/vesselalert/load_databases"

    # Iterate through the ships:
    for vessel in "${VESSEL_INDEX[@]}"; do
        if [[ -z "${VESSELS[${vessel}:mmsi]}" ]]; then continue; fi    # capture empty mmsi and skip
        # now we have the mastodon notification status of the vessel in mast_status. Let's check if we need to notify:

        # based on timing:
        if chk_disabled "$NOTIFY_EVERY"; then
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) skipped notify based on timing because NOTIFY_EVERY is $NOTIFY_EVERY"; fi
            notify_timing="false"
        elif [[ -n "${VESSELS[${vessel}:notification:last]}" ]] \
           && (( $(date +%s) <= ${VESSELS[${vessel}:notification:last]} + ${NOTIFY_EVERY:-86400} )); then
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) skipped notify based on timing. (Last notification was $(( $(date +%s) - ${VESSELS[${vessel}:notification:last]} )) secs ago, minimum interval is $NOTIFY_EVERY secs )"; fi
            notify_timing="false"
        else
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify based on timing. (Last notification was $( [[ -n "${VESSELS[${vessel}:notification:last]}" ]] && echo "$(( $(date +%s) - ${VESSELS[${vessel}:notification:last]} )) secs ago" || echo "never"), minimum interval is $NOTIFY_EVERY secs )"; fi
            export notify_timing="true"
        fi
        # Never notify if last observation was more than 10 mins ago:
        if [[ -n "${VESSELS[${vessel}:last_signal]}" ]] \
           && (( ${VESSELS[${vessel}:last_signal]} > 600 )); then
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) overruled/skipped notify based on timing: last heard was too long ago: ${VESSELS[${vessel}:last_signal]} > 600 secs "; fi
            notify_timing="false"
        fi

        # based on distance from last notification:
        #shellcheck disable=SC2086
        if [[ -n "${NOTIFY_MIN_DIST}" ]] \
            && [[ -n "${VESSELS[${vessel}:lat]}" ]] && [[ -n "${VESSELS[${vessel}:lon]}" ]] \
            && [[ "${VESSELS[${vessel}:lat]}" != "null" ]] && [[ "${VESSELS[${vessel}:lon]}" != "null" ]] \
            && [[ -n "${VESSELS[${vessel}:notification:lat]}" ]] && [[ -n "${VESSELS[${vessel}:notification:lon]}" ]] \
            && [[ "$(nice -n 20 bc -l <<<"scale=2; $(nice -n 20 distance ${VESSELS[${vessel}:notification:lat]} ${VESSELS[${vessel}:notification:lon]} ${VESSELS[${vessel}:lat]} ${VESSELS[${vessel}:lon]}) <= $NOTIFY_MIN_DIST")" == "1" ]]
        then
            notify_distance="false"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) traveled distance too short - do not notify (measured $(nice -n 20 distance "${VESSELS[${vessel}:notification:lat]}" "${VESSELS[${vessel}:notification:lon]}" "${VESSELS[${vessel}:lat]}" "${VESSELS[${vessel}:lon]}") < allowed $NOTIFY_MIN_DIST )"; fi
        elif [[ -n "${NOTIFY_MIN_DIST}" ]] \
            && [[ -n "${VESSELS[${vessel}:lat]}" ]] && [[ -n "${VESSELS[${vessel}:lon]}" ]] \
            && [[ "${VESSELS[${vessel}:lat]}" != "null" ]] && [[ "${VESSELS[${vessel}:lon]}" != "null" ]] \
            && [[ -n "${VESSELS[${vessel}:notification:lat]}" ]] && [[ -n "${VESSELS[${vessel}:notification:lon]}" ]]
        then
            export notify_distance="true"
            chk_enabled "${DEBUG}" && [[ -n "${NOTIFY_MIN_DIST}" ]] && "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify by distance: traveled distance far enough (measured $(nice -n 20 distance "${VESSELS[${vessel}:notification:lat]}" "${VESSELS[${vessel}:notification:lon]}" "${VESSELS[${vessel}:lat]}" "${VESSELS[${vessel}:lon]}") >= allowed $NOTIFY_MIN_DIST )"
        else
            notify_distance="false"
            chk_enabled "${DEBUG}" && [[ -z "${NOTIFY_MIN_DIST}" ]] && "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) no need to notify by distance: NOTIFY_MIN_DIST not defined"
        fi

        # dont notify if it matches the Skip Filter
        if     [[ -n "${NOTIFY_SKIP_FILTER}" ]] \
            && [[ ${VESSELS[${vessel}:mmsi]} =~ ${NOTIFY_SKIP_FILTER} ]]
        then
            notify_filter="false"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) skipped because of mmsi filter match (${NOTIFY_SKIP_FILTER})"; fi
        elif [[ -n "${NOTIFY_SKIP_FILTER}" ]]
        then
            notify_filter="true"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify: NOTIFY_SKIP_FILTER defined but no mmsi skip filter match"; fi
        else
            notify_filter="true"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) no need to notify by filter: no NOTIFY_SKIP_FILTER defined"; fi
        fi

        # check once more the min_msg_count. Too few messages means the screenshot won't be complete and it'd be better to wait
        if [[ ! ${VESSELS[${vessel}:count]}  =~ ^[0-9]+$ ]] || (( ${VESSELS[${vessel}:count]} < MIN_MSG_COUNT ))
        then
            notify_count="false"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Skipped notification: MIN_MSG_COUNT of $MIN_MSG_COUNT not yet exceeded (count=${VESSELS[${vessel}:count]})"; fi
        elif [[ -z "${VESSELS[${vessel}:shipname]}" ]] && (( ${VESSELS[${vessel}:count]} < 25 ))
        then
            notify_count="false"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Skipped notification:  no shipname and min msg count of 25 not yet exceeded (count=${VESSELS[${vessel}:count]})"; fi
        else
            notify_count="true"
            if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify: MIN_MSG_COUNT of $MIN_MSG_COUNT exceeded (count=${VESSELS[${vessel}:count]})"; fi
        fi

        # Notify only if validated =="1"
        if chk_enabled "${VESSELS[${vessel}:validated]}"; then notify_validated="true"; else notify_validated="false"; fi

        # Notification logic here for clarity:
        notify_now="false"
        if chk_enabled "$notify_timing"; then notify_now="true"; fi       # notify when timing is right or when the timing is undefined
        if chk_enabled "$notify_distance"; then notify_now="true"; fi     # notify when the distance traveled is far enough
        if chk_disabled "$notify_filter"; then notify_now="false"; fi       # stop and overrule notification if the MMSI filter has a match
        if chk_disabled "$notify_count"; then notify_now="false"; fi	    # overrule notification because there are too few messages
        if chk_disabled "$notify_validated"; then notify_now="false"; fi	# overrule notification because validation hasn't been done
        if chk_disabled "$NOTIFY_WHEN_SHIPNAME_EMPTY" && [[ -z "${VESSELS[${vessel}:shipname]}" ]]; then notify_now="false"; fi	# overrule notification because there's no shipname

        if chk_enabled "${DEBUG}" && chk_enabled "$notify_now"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Final result: Will do a notification (timing=$notify_timing; distance=$notify_distance; filter=$notify_filter; count=$notify_count)"; fi
        if chk_enabled "${DEBUG}" && chk_disabled "$notify_now"; then "${s6wrap[@]}" echo "[DEBUG] ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Final result: Will not do a notification (timing=$notify_timing; distance=$notify_distance; filter=$notify_filter; count=$notify_count)"; fi

        if chk_enabled "$notify_now"; then
            # we need to notify
            extra_args=""
            [[ "$notify_timing" == "true" ]] && [[ -n "${VESSELS[${vessel}:notification:last]}" ]] && extra_args+="timing=$(( $(date +%s) - ${VESSELS[${vessel}:notification:last]} )) "  # notify when timing is right or when the timing is undefined
            [[ "$notify_distance" == "true" ]] && extra_args+="distance=$(nice -n 20 distance "${VESSELS[${vessel}:notification:lat]}" "${VESSELS[${vessel}:notification:lon]}" "${VESSELS[${vessel}:lat]}" "${VESSELS[${vessel}:lon]}")" # notify when the distance traveled is far enough

            # Get a vessel image:
            image_link="https://photos.marinetraffic.com/ais/showphoto.aspx?mmsi=${VESSELS[${vessel}:mmsi]}"

            # Try to get an image if there isn't already one:
            if [[ ! -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg" ]]
            then
                if ! curl -sL -A "Mozilla/5.0 (X11; Linux x86_64; rv:97.0) Gecko/20100101 Firefox/97.0" "$image_link" -o  "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"
                then
                    rm -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"
                fi
            fi
            # If the file starts with <!DOCTYPE html>, we know it was an error message and we can erase it:
            if grep '<!DOCTYPE html>' < <(dd bs=1 count=15 if="$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg" 2>/dev/null) >/dev/null 2>&1
            then
                rm -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"
            fi

            # If getting a photo was successful (or one already existed), let's `touch` it so the retention period is reset:
            touch -c "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"

            # Try to get a screenshot:
            rm -f "/${IMAGECACHE}/screenshots/${VESSELS[${vessel}:mmsi]}.jpg"

            # get a screenshot
            if [[ -n "$SCREENSHOT_URL" ]] && curl -sSL "$SCREENSHOT_URL/snap/${VESSELS[${vessel}:mmsi]}" -o "${IMAGECACHE}/screenshots/${VESSELS[${vessel}:mmsi]}.jpg"
            then
                "${s6wrap[@]}" echo "[INFO] Got screenshot for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]})"
            else
                "${s6wrap[@]}" echo "[INFO] Failed to get screenshot for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]})"
            fi

            # Add friendly destination name if possible
            if [[ -n "${VESSELS[${vessel}:destination]}" ]] && [[ -z "${VESSELS[${vessel}:destination:friendly]}" ]]; then
                d="${VESSELS[${vessel}:destination]^^}"
                if ! grep -qe  ">" <<< "$d"; then d=">$d"; fi
                d="${d// /}"
                d="${d//US\^/}"
                
                d_org="$(sed -nE 's|^([A-Z0-9]{4,5})[<>]{1,2}.*$|\1|p' <<< "$d")"
                if (( ${#d_org} == 5 )); then # UNLOCODE lookup
                    d_org_friendly="$(awk -F, -v country_bare="${d_org:0:2}" \
                                            -v country="\"${d_org:0:2}\"" \
                                            -v loc="\"${d_org:2:3}\"" \
                                            '{if ($2 == country && $3 == loc) {print $5 ", " country_bare; exit}}' /data/*UNLOCODE*.csv)"
                    d_org_friendly="${d_org_friendly//\"/}"
                elif (( ${#d_org} == 4 )); then # US GUID lookup
                    d_org_friendly="$(awk -F, -v var="$d_org" '{if ($1 == var) {print $9 ", " $10; exit}}' /data/GUID*.csv)"
                else d_org_friendly=""
                fi
                
                d_dst="$(sed -nE 's|^.*[<>]{1,2}([A-Z0-9]{4,5})[^A-Z0-9]*$|\1|p' <<< "$d")"
                if (( ${#d_dst} == 5 )); then # UNLOCODE lookup
                    d_dst_friendly="$(awk -F, -v country_bare="${d_dst:0:2}" \
                                            -v country="\"${d_dst:0:2}\"" \
                                            -v loc="\"${d_dst:2:3}\"" \
                                            '{if ($2 == country && $3 == loc) {print $5 ", " country_bare; exit}}' /data/*UNLOCODE*.csv)"
                    d_dst_friendly="${d_dst_friendly//\"/}"
                elif (( ${#d_dst} == 4 )); then # US GUID lookup
                    d_dst_friendly="$(awk -F, -v var="$d_dst" '{if ($1 == var) {print $9 ", " $10; exit}}' /data/GUID*.csv)"
                else d_dst_friendly=""
                fi
            
                if [[ $d =~ '<>' ]]; then
                    destination_friendly="BETWEEN $d_org_friendly AND $d_dst_friendly"
                elif [[ $d =~ '>' ]]; then
                    if [[ -n "$d_org_friendly" ]]; then
                        destination_friendly="FROM $d_org_friendly TO $d_dst_friendly"
                    else
                        destination_friendly="TO $d_dst_friendly"
                    fi
                fi

                if [[ -n "$destination_friendly" ]]; then
                    VESSELS[${vessel}:destination:friendly]="$destination_friendly"
                fi
            fi

            # ---------------------------------------------------------------------------------------------
            # INSERT ANY CALLS TO ACTUAL NOTIFIERS BETWEEN THE TWO LINES
            # shellcheck disable=SC2086  # we want globbing of $extra_args here
            [[ -n "${MASTODON_ACCESS_TOKEN}" ]] && nice -n 20 /usr/share/vesselalert/send_mastodon "${VESSELS[${vessel}:mmsi]}" ${extra_args} || true
            # shellcheck disable=SC2086  # we want globbing of $extra_args here
            [[ -n "${DISCORD_WEBHOOKS}" ]] && nice -n 20 /usr/share/vesselalert/send_discord "${VESSELS[${vessel}:mmsi]}" ${extra_args} || true
            # shellcheck disable=SC2086  # we want globbing of $extra_args here
            [[ -n "${BLUESKY_APP_PASSWORD}" ]] && [[ -n "$BLUESKY_HANDLE" ]] && nice -n 20 /usr/share/vesselalert/send_bluesky "${VESSELS[${vessel}:mmsi]}" ${extra_args} || true
            # shellcheck disable=SC2086  # we want globbing of $extra_args here
            [[ -n "${MQTT_URL}" ]] && nice -n 20 /usr/share/vesselalert/send_mqtt "${VESSELS[${vessel}:mmsi]}" ${extra_args} || true

            # ---------------------------------------------------------------------------------------------


            chk_enabled "${DEBUG}" && echo "updated VESSELS[$mmsi]"
            # Increment notification count
            (( notification_count++ )) || true

            if [[ -n "$NOTIFICATION_THROTTLE" ]] && [[ "$(nice -n 20 bc <<< "${notification_count}%10")" == "0" ]]
            then
                # we need to throttle - let's wait 15 seconds
                if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] Notification Count is ${notification_count}; throttling for 15 seconds"; fi
                sleep 15
            fi
        fi
    done

    if chk_enabled "${DEBUG}"; then "${s6wrap[@]}" echo "[DEBUG] Notification count: ${notification_count}"; fi

    notification_count=0

    # Remove file block:
    rm -f "$VESSELDBLOCK"

    # Clean up memory; arrays will be re-read next turn
    unset KEY_INDEX
    unset VESSEL_INDEX
    unset VESSELS
    unset SHIPTYPE
    unset SHIPSTATUS
    unset COUNTRY 

    # Sleep a bit
    sleep "$CHECK_INTERVAL"

done
"${s6wrap[@]}" echo "[INFO] restarting $APPNAME to clean up memory"